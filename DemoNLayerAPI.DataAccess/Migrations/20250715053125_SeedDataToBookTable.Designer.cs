// <auto-generated />
using DemoNLayerApi.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DemoNLayerApi.Data.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250715053125_SeedDataToBookTable")]
    partial class SeedDataToBookTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BookCategory", (string)null);

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            CategoriesId = 1
                        },
                        new
                        {
                            BooksId = 1,
                            CategoriesId = 2
                        },
                        new
                        {
                            BooksId = 2,
                            CategoriesId = 1
                        });
                });

            modelBuilder.Entity("DemoNLayerApi.Models.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Author 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Author 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Author 3"
                        });
                });

            modelBuilder.Entity("DemoNLayerApi.Models.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(50m);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Description = "Demo description of Book A",
                            Price = 0m,
                            Title = "Book A"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Description = "Demo description of Book B",
                            Price = 0m,
                            Title = "Book B"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            Description = "Demo description of Book C",
                            Price = 0m,
                            Title = "Book C"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            Description = "Demo description of Book D",
                            Price = 0m,
                            Title = "Book D"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            Description = "Demo description of Book E",
                            Price = 0m,
                            Title = "Book E"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 1,
                            Description = "Demo description of Book F",
                            Price = 0m,
                            Title = "Book F"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 5,
                            Description = "A sweeping historical romance set during WWII, where love and sacrifice intertwine.",
                            Price = 14.99m,
                            Title = "Beneath the Crimson Sky"
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 6,
                            Description = "A fast-paced techno-thriller about a hacker who uncovers a government conspiracy.",
                            Price = 11.50m,
                            Title = "Digital Shadows"
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 7,
                            Description = "A lyrical tale of loss, memory, and finding one's roots in an ancestral home.",
                            Price = 13.25m,
                            Title = "The Garden of Echoes"
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 8,
                            Description = "In a noir-inspired metropolis, a detective must unravel a string of mysterious disappearances.",
                            Price = 12.00m,
                            Title = "City of Broken Glass"
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 9,
                            Description = "A poignant coming-of-age story set in southern India during the monsoon season.",
                            Price = 10.75m,
                            Title = "Monsoon Whispers"
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 10,
                            Description = "An adventure novel centered on a treasure-hunting expedition gone awry.",
                            Price = 15.00m,
                            Title = "The Tides of Isla Roja"
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 11,
                            Description = "A historical fantasy blending martial arts, court intrigue, and ancient magic.",
                            Price = 14.50m,
                            Title = "Silk and Steel"
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = 12,
                            Description = "A speculative fiction novel where destiny is determined by an AI system.",
                            Price = 13.99m,
                            Title = "The Algorithm of Fate"
                        },
                        new
                        {
                            Id = 18,
                            AuthorId = 13,
                            Description = "A poetic novel exploring family honor, tradition, and rebellion in the Middle East.",
                            Price = 12.95m,
                            Title = "Veil of Jasmine"
                        },
                        new
                        {
                            Id = 19,
                            AuthorId = 14,
                            Description = "A Nordic mystery set in a remote village where the past resurfaces with deadly intent.",
                            Price = 11.80m,
                            Title = "Frozen Fjords"
                        });
                });

            modelBuilder.Entity("DemoNLayerApi.Models.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Science"
                        });
                });

            modelBuilder.Entity("DemoNLayerApi.Models.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DemoNLayerApi.Models.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Internal");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("DemoNLayerApi.Models.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoNLayerApi.Models.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DemoNLayerApi.Models.Models.Book", b =>
                {
                    b.HasOne("DemoNLayerApi.Models.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DemoNLayerApi.Models.Models.UserProfile", b =>
                {
                    b.HasOne("DemoNLayerApi.Models.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("DemoNLayerApi.Models.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DemoNLayerApi.Models.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DemoNLayerApi.Models.Models.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
